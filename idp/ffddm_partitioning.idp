load "scotch"
load "metis"

/*# beginPartition #*/
macro ffddmbuildDmeshf(pr, Th, partdof, sizeoverlaps)
if (pr#isincomm)
{	
  pr#tic(pr#tdecompi)
  if (!pr#excluded) {
    int backup = searchMethod;
    searchMethod = 1;

    pr#overlap = sizeoverlaps;
        
    int ssplit = max(pr#inexactCSsplit,1);
    
    if (pr#npart == 1) {
      if (ffddmsplit*ssplit == 1)
        pr#Thi = Th;
      else
        pr#Thi=trunc(Th,1,split=ssplit*ffddmsplit);                 /* freefem's trick, formal definition*/

      pr#aTh[0]=pr#Thi;
      real[int] one(pr#VhiP1.ndof);
      one=1.;
      pr#RihP1[0]=one;
      pr#DP1[0]=1.;
      
      /*
      if (pr#verbosity && mpiRank(pr#commddm) == 0)
      cout << "prefix \"" << Stringification(pr) << "\", ndof = " << pr#Vhi.ndof << endl;
      */
    }
    else 
    for(int ii=0;ii<pr#npart;++ii)
    if ((!bpara) || (ii == mpiRank(pr#commddm))) {
      
      int[int] arrayIntersectioni;
      
      int numberIntersectioni = 0;
      
      meshN overlapName=Th;
      fespace VhGlobalff(overlapName, P1);
      fespace PhGlobalff(overlapName, P0);
      PhGlobalff part;
      part[]=partdof;
      
      PhGlobalff supp = abs(part - ii) < 0.1;
      VhGlobalff suppSmooth;
      AddLayers(overlapName, supp[], (sizeoverlaps == 0) + sizeoverlaps * 2, suppSmooth[]);
      {   
        meshN neighbors = trunc(overlapName, suppSmooth > 0.001 && (suppSmooth < 0.999));
        fespace Oh(neighbors, P0);
        Oh partOverlap = part;
        
        Unique(partOverlap[], arrayIntersectioni);          
        
      }
      
      pr#VhiP1[int] partitionIntersectioni(arrayIntersectioni.n);
      pr#partitionIntersectionbasei.resize(arrayIntersectioni.n);
      
      if(ffddmsplit>1) {
        overlapName = trunc(overlapName, suppSmooth > 0.001, split = ffddmsplit);
        supp = abs(part - ii) < 0.1;
        suppSmooth = 0;
        AddLayers(overlapName, supp[], (sizeoverlaps == 0) + 2 * sizeoverlaps, suppSmooth[]);
      }
      
      pr#Thi = trunc(overlapName, suppSmooth > 0.001, split=ssplit);
      overlapName = trunc(overlapName, suppSmooth > 0.001);
      supp = supp;
      suppSmooth = suppSmooth;

      meshN borderName;
      if (sizeoverlaps > 0) {
        pr#Thi = trunc(pr#Thi, suppSmooth> 0.501, label = ffddminterfacelabel);
        borderName = trunc(overlapName, (suppSmooth > (sizeoverlaps - 0.999) / (2 * sizeoverlaps)) && (suppSmooth < 0.501), label = (abs(ffddminterfacelabel) + 1) * 100);
      }
      else {
        fespace fP0(pr#Thi,P0);
        fP0 part0 = part;
        pr#Thi = trunc(pr#Thi, abs(part - ii) < 0.1, label = ffddminterfacelabel);
        borderName = trunc(overlapName, suppSmooth < 0.999, label = (abs(ffddminterfacelabel) + 1) * 100);
      }
      
      pr#VhiP1 khi;
      if (sizeoverlaps > 0) {
        khi = max(suppSmooth*2 - 1.0, 0.) ;
        if(usedARGV("-steep") != -1)
        khi = khi > 0.001 ? 1.0 : 0.0;

        else if (usedARGV("-raspart") != -1) {
          VhGlobalff phir;
          PhGlobalff suppP0 = abs(ii - part) < 0.1;
          varf vSuppi(u,v) = intN(overlapName,qforder=1)(suppP0*v);
          phir[] = vSuppi(0,VhGlobalff);
          phir = phir > 0.;
          khi = phir;
        }
      }
      else {
        khi[] = 1.;
      }
      
      pr#VhiP1 sum = khi;
      VhGlobalff phi = 0, phibase = 0;
      
      /*real eps=int2d(overlapName)(1.);*/
      real eps = intN(overlapName)(1.0);
      real[int] epsn(arrayIntersectioni.n);
      if(bpara){ /* version for very ugly meshes, not implemented yet for bseq*/        
        mpiRequest[int] rqn(2*arrayIntersectioni.n);
        for(int j=0;j<arrayIntersectioni.n;++j)
        Isend(processor(arrayIntersectioni[j],pr#commddm,rqn[j*2]),eps);
        for(int j=0;j<arrayIntersectioni.n;++j)
        Irecv(processor(arrayIntersectioni[j],pr#commddm,rqn[j*2+1]),epsn[j]);
        for(int j=0;j<2*arrayIntersectioni.n;++j)
        int k = mpiWaitAny(rqn);
      }    
      for(int i = 0; i < arrayIntersectioni.n; ++i) {
        PhGlobalff suppPartition = abs(arrayIntersectioni[i] - part) < 0.1;
        
        PhGlobalff suppP0;
        suppP0[] = suppPartition[];
        
        if (sizeoverlaps > 0) {
          AddLayers(overlapName, suppPartition[], sizeoverlaps, phi[]);

          phibase[] = phi[];

          if(usedARGV("-steep") != -1)
            phi = phi > 0.001 ? 1.0 : 0.0;
          else if (usedARGV("-raspart") != -1) {
            VhGlobalff phir;
            varf vSuppi(u,v) = intN(overlapName,qforder=1)(suppP0*v);
            phir[] = vSuppi(0,VhGlobalff);
            phir = phir > 0.;
            phi = phir;
          }
        }
        else {
          VhGlobalff phir;
          varf vSuppi(u,v) = intN(overlapName,qforder=1)(suppP0*v);
          phir[] = vSuppi(0,VhGlobalff);
          phir = phir > 0.;
          phi = phir;
          phibase[] = phi[];
        }
        
        /*real intersection=intN(overlapName)(phibase)/eps;*/
        /*if(arrayIntersectioni[i] <=1)*/
        real epsi=0;
        if(bpara){ /* version for very ugly meshes, not implemented yet for bseq */
          epsi = min(eps,epsn[i]);
        }
        else{
          epsi = eps;	
        }   
        real intersection;
        if (pr#overlap > 0)
          intersection = intN(overlapName)(phibase) / epsi;
        else {
          partitionIntersectioni[numberIntersectioni] = phi;
          intersection = partitionIntersectioni[numberIntersectioni][].max;
        }
        if( intersection>1e-6)
        {
          partitionIntersectioni[numberIntersectioni] = phi;
          
          pr#partitionIntersectionbasei[numberIntersectioni] = phibase;              
          
          sum[] += partitionIntersectioni[numberIntersectioni][];
          arrayIntersectioni[numberIntersectioni++] = arrayIntersectioni[i];
        }
        
      }
      
      khi[] = khi[] ./= sum[];
      
      overlapName = minimalMesh;
      if(numberIntersectioni != arrayIntersectioni.n)
      arrayIntersectioni.resize(numberIntersectioni);  
      
      /* PoU for inexactsplit > 1 */
      if (pr#inexactCSsplit > 1) {
        
        fespace Phi(pr#Thi,P0);
        Phi suppP0i = abs(ii - part) < 0.1;
        varf vSuppii(u,v) = intN(pr#Thi,qforder=1)(suppP0i*v);
        pr#VhiP1 phiri;
        phiri[] = vSuppii(0,pr#VhiP1);
        phiri = phiri > 0.; 
        
        pr#VhiP1 sumi = phiri;
        
        for(int i = 0; i < arrayIntersectioni.n; ++i) {    
          Phi suppP0n = abs(arrayIntersectioni[i] - part) < 0.1;
          varf vSuppin(u,v) = intN(pr#Thi,qforder=1)(suppP0n*v);
          pr#VhiP1 phirn;
          phirn[] = vSuppin(0,pr#VhiP1);
          phirn = phirn > 0.; 
          sumi[] += phirn[];  
        }   
        
        khi[] = phiri[] ./= sumi[];      
      }
      
      if (bpara) {
        pr#numberIntersection = numberIntersectioni;	
        pr#arrayIntersection.resize(pr#numberIntersection);
        pr#arrayIntersection = arrayIntersectioni;
      }
      
      if(!bnoGlob)
      {
        fespace pr#VhglobP1(pr#Thglob,P1);
        pr#RihP1[ii]=interpolate(pr#VhiP1,pr#VhglobP1);
        
        
        int[int] I(1),J(1);
        real[int] Kc(1);
        [I,J,Kc] = pr#RihP1[ii];
        for (int i=0;i<Kc.n;i++)
        if (Kc[i] > 0.99)
        Kc[i] = 1.;
        pr#RihP1[ii] = [I,J,Kc];
        
        pr#RihP1[ii].thresholding(1e-10);
        pr#RihP1[ii].resize(pr#VhiP1.ndof,pr#VhglobP1.ndof);
      }	
      
      pr#aTh[ii]=pr#Thi;
      pr#aThborder[ii]=trunc(borderName,1,split=ssplit);

      if (bpara && pr#overlap == 0) {
        IFMACRO(pr#mminoverlap,1)
        fespace pr#PhAugP0(pr#AugThi,P0);
        pr#PhAugP0 phaug = part;
        pr#partAug.resize(pr#PhAugP0.ndof);
        pr#partAug = phaug[];
        ENDIFMACRO
        ;
      }

      pr#DP1[ii] = khi;
    }
    searchMethod = backup;
  }
  if (bseq)
  pr#Thi = pr#Thglob;
  
  pr#toc(pr#tdecompi,"",pr#tdecomp)
} 
//EOM

macro ffddminitDmeshf(pr,Th,comm)
IFMACRO(!pr#init)
int pr#npart = ffddmnpart;

/*int pr#verbosity = ffddmverbosity;*/

real pr#tdecompi;
real pr#tdecomp = 0;

NewMacro pr#tic(tim) tim = mpiWtime(); EndMacro
NewMacro pr#toc(tim,msg,totaltime)
if (pr#isincomm)
{
  tim = mpiWtime() - tim;
  
  real ttimeg = 0;
  mpiAllReduce(tim,ttimeg,pr#mpicomm,mpiMAX); 
  if ((mpiRank(pr#mpicomm) == 0) /*&& (pr#verbosity > 0)*/ && (msg != ""))
  cout << "timings - " << msg << " : " << ttimeg << " s" << endl;
  totaltime += ttimeg;
  
  /*totaltime += tim;*/
}
EndMacro

NewMacro pr#toccomm(tim,msg,totaltime,comm)
if (pr#isincomm)
{
  tim = mpiWtime() - tim;
  
  real ttimeg = 0;
  mpiAllReduce(tim,ttimeg,comm,mpiMAX);
  if ((mpiRank(comm) == 0) && (msg != ""))
  cout << "timings - " << msg << " : " << ttimeg << " s" << endl;
  totaltime += ttimeg;
  
  /*totaltime += tim;*/
}
EndMacro

meshN pr#Thi = minimalMesh;

fespace pr#VhiP1(pr#Thi,P1);

pr#VhiP1[int] pr#partitionIntersectionbasei(0);

int pr#overlap = 0;

int pr#numberIntersection = 0;

int[int] pr#arrayIntersection(0);

meshN pr#Thglob = minimalMesh;

matrix[int] pr#RihP1(pr#npart);
pr#VhiP1[int] pr#DP1(pr#npart);

NewMacro pr#mpicomm()comm EndMacro

int[int] pr#procddm = [mpirank];
int[int] pr#procCS = [mpirank];

int pr#isincomm = (mpiRank(comm) >= 0);

int pr#excluded = !pr#isincomm;

if (pr#isincomm) {
  int[int] globranks(mpiSize(comm));
  int myglobrank = mpirank;
  
  mpiAllgather(myglobrank,globranks,comm);
  
  if ((pr#pCS > 1) && (mpiRank(comm) < pr#pCS)) {
    pr#procCS.resize(pr#pCS);
    for (int i=0; i<pr#pCS;i++)
    pr#procCS[i] = globranks[i];
  }
  
  if (!pr#exclude) {
    pr#procddm.resize(mpiSize(comm));
    if (mpiSize(comm) > 1)
    for (int i=0; i<mpiSize(comm);i++)
    pr#procddm[i] = globranks[i];
    else
    pr#procddm = [0];
  }
  else {
    pr#procddm.resize(mpiSize(comm)-pr#pCS);
    if (mpiSize(comm) > 1)
    for (int i=0; i<mpiSize(comm)-pr#pCS;i++)
    pr#procddm[i] = globranks[i+pr#pCS];
    else
    pr#procddm = [0];
    if (mpiRank(comm) < pr#pCS)
    pr#excluded = 1;	
  }
}

mpiGroup pr#grpddm(pr#procddm);
mpiComm pr#commddm(mpiCommWorld,pr#grpddm);
mpiGroup pr#grpCS(pr#procCS);
mpiComm pr#commCS(mpiCommWorld,pr#grpCS);

int[int] pr#procself = [mpiRank(mpiCommWorld)];
mpiGroup pr#grpself(pr#procself);
mpiComm pr#commself(mpiCommWorld,pr#grpself);

/*  Domain decomposition data structures */
meshN[int] pr#aTh(pr#npart);        /* sequence of ovr. meshes */ 
meshN[int] pr#aThborder(pr#npart);

real[int] pr#partAug(1);

NewMacro pr#init()1 EndMacro
ENDIFMACRO
// EOM

macro ffddmpartf(pr,Th,res)
{
  pr#tic(pr#tdecompi)
  
  fespace pr#Ph0(Th,P0);
  pr#Ph0 upart;                                  /* piecewise constant function */
  int[int] lpart(pr#Ph0.ndof);                       /* giving the decomposition */
  
  if (bpara){
    if (!pr#excluded && mpiRank(pr#commddm)==0 && (pr#npart != mpiSize(pr#commddm))) {
      cout << "bpara option PB: npart==" << pr#npart << " != mpiSize(commddm)==" << mpiSize(pr#commddm) << endl;
      assert(pr#npart == mpiSize(pr#commddm));
    }
  }
  
  if(!pr#excluded) {
    if (pr#npart == 1) {
      upart[] = 0.; 
    }
    else if(ffddmpartitioner != 0) {
      if(ffddmpartitioner == 2) {
        if (mpiRank(pr#commddm) == 0) {
          scotch(lpart,Th,pr#npart);
          for(int i=0;i<lpart.n;++i)
          upart[][i]=lpart[i];    
        }   
        broadcast(processor(0, pr#commddm), upart[]); 
      }
      else {
        if (mpiRank(pr#commddm) == 0) {
          metisdual(lpart,Th,pr#npart); 
          for(int i=0;i<lpart.n;++i)
          upart[][i]=lpart[i];
        }   
        broadcast(processor(0, pr#commddm), upart[]); 
      }
    }
    else {
      IFMACRO (!pr#simple)
      if (mpiRank(pr#commddm) == 0)
      cout << "["+Stringification(pr)+"] partitioner option PB: you must declare a \'"+Stringification(pr)+"simple\' partitioning macro when using ffddmpartitioner = 0" << endl;
      assert(0);
      ENDIFMACRO
      IFMACRO (pr#simple)
      pr#simple(pr#Ph0, upart, comm)
      ENDIFMACRO
    }    	
    
    if (ffddmbplot && (mpiRank(pr#commddm) == 0)) {	
      if (ffddmbffplot)
      plot(upart,wait=0,cmm="partition",value=1,fill=1);
      if (ffddmbmedit)
      medit("partition",Th,upart);
    }
    
    res.resize(upart[].n);
    res = upart[];
  }
  
  pr#toc(pr#tdecompi,"",pr#tdecomp)
}
// EOM

macro ffddminitDfespacef(pr,prmsh,scalar,udef,uinit,mPk,udefpart,uinitpart,mPkP0)
IFMACRO(!pr#feinit)
NewMacro pr#prmesh prmsh EndMacro

NewMacro pr#K scalar EndMacro
NewMacro pr#mdef udef EndMacro
NewMacro pr#minit uinit EndMacro

NewMacro pr#mdefpart udefpart EndMacro
NewMacro pr#minitpart uinitpart EndMacro

func pr#fPk = mPk;
func pr#fPkP0 = mPkP0;

fespace pr#Vhi(prmsh#Thi,pr#fPk);

fespace pr#Vhglob(prmsh#Thglob,pr#fPk);

pr#K[int][int] pr#Dk(prmsh#npart);

matrix<pr#K>[int] pr#Rih(prmsh#npart);               /* local restriction operators  */
matrix<pr#K>[int] pr#Dih(prmsh#npart);               /* partition of unity operators */

matrix<pr#K>[int] pr#restrictionIntersection(0);

/* communication buffers */
pr#K[int][int] pr#rcv(0);
pr#K[int][int] pr#snd(0);

int pr#Ndofglobal = 0;

IFMACRO(prmsh#buildAug,1)
matrix<scalar> pr#Auginterp;
ENDIFMACRO

/* Update u_i = R_i sum_j (R_j' u_j)
   if (scale) u_i = R_i sum_j (R_j' D_j u_j)
   using communication buffers in the overlap */
func int pr#update(scalar[int] vv, bool scale)
{
  if (!prmsh#excluded)
  {
    if (scale)
      vv = vv .* pr#Dk[mpiRank(prmsh#commddm)];
    mpiRequest[int] rq(prmsh#numberIntersection*2);
    for(int j=0;j<prmsh#numberIntersection;++j)
      pr#snd[j] = pr#restrictionIntersection[j]*vv;
    for(int j=0;j<prmsh#numberIntersection;++j)
      Isend(processor(prmsh#arrayIntersection[j],prmsh#commddm,rq[j*2]),pr#snd[j]);
    for(int j=0;j<prmsh#numberIntersection;++j)
      Irecv(processor(prmsh#arrayIntersection[j],prmsh#commddm,rq[j*2+1]),pr#rcv[j]);
    for(int j=0;j<prmsh#numberIntersection*2;++j)
      int k = mpiWaitAny(rq);
    for(int j=0;j<prmsh#numberIntersection;++j)
      vv += pr#restrictionIntersection[j]'*pr#rcv[j];
  }
  return 0;
}

func scalar pr#scalprod(scalar[int] va, scalar[int] vb)
{
  scalar res = 0;
  if(prmsh#isincomm) {
    /*prmsh#tic(pr#tloc)*/
    scalar resi = 0;
    if (!bpara) {
      resi = va '* vb;
    }
    else if (!prmsh#excluded){
      scalar[int] sa = va .* pr#Dk[mpiRank(prmsh#commddm)];
      resi = sa '* vb;
    }
    mpiAllReduce(resi,res,prmsh#mpicomm,mpiSUM);
    /*prmsh#toc(pr#tloc,"",pr#tscalprod)*/
  }
  return res;
}

NewMacro pr#plot(u,s)
  if (prmsh#isincomm) {
    if (ffddmbplot) {	
      fespace VhP1(prmsh#Thglob,P1);
      VhP1 solplot;
      if (!bpara) {
        if (mpiRank(prmsh#mpicomm) == 0)
        solplot = u;
      }
      else if (!prmsh#excluded){   
        prmsh#VhiP1 v = u;
        v[] = prmsh#DP1[mpiRank(prmsh#commddm)][].*v[];
        VhP1 tmp;
        tmp[] = prmsh#RihP1[mpiRank(prmsh#commddm)]'*v[];
        solplot[] = 0;
        mpiReduce(tmp[],solplot[],processor(0,prmsh#commddm),mpiSUM);
      }
      if (mpiRank(prmsh#commddm) == 0) {
        if (ffddmbmedit)
        medit(s,prmsh#Thglob,solplot);
        if (ffddmbffplot)
        plot(solplot,dim=3,wait=0,cmm=s, value =1,fill=1,nbiso=ffddmnbiso);     
      }
    }
  }
EndMacro

NewMacro pr#feinit()1 EndMacro
ENDIFMACRO
// EOM

macro ffddmbuildDfespacef(pr,prmsh,scalar,udef,uinit,mPk,udefpart,uinitpart,mPkP0)

ffddminitDfespacef(pr,prmsh,scalar,udef,uinit,mPk,udefpart,uinitpart,mPkP0)

pr#Ndofglobal = pr#Vhglob.ndof;

if (!bpara && ffddmverbosity)
cout << "["+Stringification(pr)+"] (seqddm) ndof = " << pr#Ndofglobal << endl;

if (prmsh#isincomm && !prmsh#excluded)
{	
  for(int ii=0;ii<prmsh#npart;++ii)
  if ((!bpara) || (ii == mpiRank(prmsh#commddm))) {
    prmsh#Thi = prmsh#aTh[ii];
    fespace Vhipart(prmsh#Thi,pr#fPkP0);
    Vhipart udefpart(utmp) = uinitpart(prmsh#DP1[ii]);

    Vhipart udefpart(usum);
    if (prmsh#overlap == 0){
      utmp[] = 1;
      usum[] = 1;
    }
    
    if (bpara) {
      int backup = searchMethod;
      searchMethod = 1;
      pr#rcv.resize(prmsh#numberIntersection);
      pr#snd.resize(prmsh#numberIntersection);
      pr#restrictionIntersection.resize(prmsh#numberIntersection);
      for(int i=0;i<prmsh#numberIntersection;++i) {
          matrix R;
          int[int] n2o(1);
          if (prmsh#overlap > 0) {
            meshN meshIntersection = trunc(prmsh#Thi, (prmsh#partitionIntersectionbasei[i] > 1.0e-6), new2old = n2o);
            fespace WhIntersection(meshIntersection, pr#fPk);
            int[int] renum = restrict(WhIntersection, pr#Vhi,n2o);
            int[int] Ic = (0:WhIntersection.ndof-1);
            real[int] Kc(WhIntersection.ndof);
            Kc = 1;
            R = [Ic,renum,Kc];
            R.resize(WhIntersection.ndof, pr#Vhi.ndof);
          }
          else {
            IFMACRO(prmsh#mminoverlap,1)
            matrix RP1 = interpolate(prmsh#VhiP1,prmsh#AugVhiP1);
            prmsh#AugVhiP1 partaugP1;
            partaugP1[] = RP1'*prmsh#partitionIntersectionbasei[i][];
            meshN meshIntersection = trunc(prmsh#AugThi, (partaugP1 > 1.0e-6), new2old = n2o);
            fespace pr#PhAugP0(prmsh#AugThi,P0);
            pr#PhAugP0 paug;
            paug[] = prmsh#partAug;
            paug = abs(paug-prmsh#arrayIntersection[i]) < 0.1;
            meshN meshNeighbor = trunc(prmsh#AugThi, paug > 0.001, label=-10);

            fespace WhIntersection(meshIntersection, pr#fPkP0);

            fespace WhNeighbor(meshNeighbor, pr#fPkP0);

            matrix Rn = interpolate(WhNeighbor,pr#AugVhi,inside=true);

            varf vneighbor(udef(u),udef(v)) = on(-10, udef(u) = uinit(1));
            real[int] bbord = vneighbor(0,WhNeighbor,tgv=1);
            real[int] bbordaug = Rn'*bbord;

            int[int] renum = restrict(WhIntersection, pr#AugVhi, n2o);

            WhIntersection udefpart(utmpi);

            matrix RR = interpolate(pr#Vhi,pr#AugVhi);

            varf vbord(udef(u),udef(v)) = on(ffddminterfacelabel, udef(u) = uinit(1));
            real[int] bmybord = vbord(0,pr#Vhi,tgv=1);
            real[int] bmybordaug = RR'*bmybord;

            for [i,bi: utmpi[]] bi = (bbordaug[renum[i]] > 0.999 && bmybordaug[renum[i]] > 0.999 ? 1 : 0);

            int[int] rest(WhIntersection.ndof);
            int ninter = 0;
            for (int j=0; j<WhIntersection.ndof; j++)
            if (utmpi[][j] > 0.999)
              rest[ninter++] = renum[j];
            rest.resize(ninter);
            if (ninter > 0){
            int[int] Ic(1);
            if (ninter > 1)
              Ic = (0:ninter-1);
            real[int] Kc(ninter);
            Kc = 1;
            matrix Raug = [Ic,rest,Kc];
            Raug.resize(ninter, pr#AugVhi.ndof);
            R = Raug*RR';
            usum[] += R'*Kc;
            }
            else {
              R.resize(0, pr#AugVhi.ndof);
            }
            ENDIFMACRO
            ;
          }

        /*cout << mpirank << " " << prmsh#arrayIntersection[i] << " " << R.n << " " << R.m << endl;*/
        pr#restrictionIntersection[i] = R;
        pr#rcv[i].resize(pr#restrictionIntersection[i].n);
        pr#snd[i].resize(pr#restrictionIntersection[i].n);
      }
      searchMethod = backup;
    }

    if (prmsh#overlap == 0)
      utmp[] = utmp[] ./= usum[];

    pr#Dk[ii].resize(Vhipart.ndof);
    IFMACRO(pr#K,complex)
    pr#Dk[ii].re = utmp[];
    ENDIFMACRO
    IFMACRO(pr#K,real)
    pr#Dk[ii] = utmp[];
    ENDIFMACRO
    matrix Dihreal = utmp[];
    Dihreal.thresholding(1e-10);
    pr#Dih[ii] = Dihreal;

    if(!bnoGlob) {
      matrix Rihreal=interpolate(pr#Vhi,pr#Vhglob);        
      int[int] I(1),J(1);
      real[int] Kc(1);
      [I,J,Kc] = Rihreal;
      for (int i=0;i<Kc.n;i++)
      if (Kc[i] > 0.99)
      Kc[i] = 1.;
      Rihreal = [I,J,Kc];    
      Rihreal.thresholding(1e-10);
      pr#Rih[ii] = Rihreal;
      pr#Rih[ii].resize(pr#Vhi.ndof, pr#Vhglob.ndof);
    }
    
    if (bseq)
      prmsh#Thi = prmsh#Thglob;
    
    if (bpara)
    {
      func ftest = x+y;
      pr#Vhi<pr#K> pr#mdef(uu), pr#mdef(vv) = pr#minit(0.);
      
      uu[] = 1.;
      
      vv[] = pr#Dk[ii];
      
      pr#K[int][int] rcv(prmsh#numberIntersection);
      pr#K[int][int] snd(prmsh#numberIntersection);
      
      mpiRequest[int] rq(prmsh#numberIntersection*2);
      
      
      for(int j=0;j<prmsh#numberIntersection;++j)
      {
        rcv[j].resize(pr#restrictionIntersection[j].n);
        snd[j].resize(pr#restrictionIntersection[j].n);
        snd[j] = pr#restrictionIntersection[j]*vv[];
      }
      
      for(int j=0;j<prmsh#numberIntersection;++j)
      Isend(processor(prmsh#arrayIntersection[j],prmsh#commddm,rq[j*2]),snd[j]);
      for(int j=0;j<prmsh#numberIntersection;++j)
      Irecv(processor(prmsh#arrayIntersection[j],prmsh#commddm,rq[j*2+1]),rcv[j]);
      
      for(int j=0;j<prmsh#numberIntersection*2;++j)
      int k = mpiWaitAny(rq);
      
      for(int j=0;j<prmsh#numberIntersection;++j)
      vv[] += pr#restrictionIntersection[j]'*rcv[j];
      
      uu[] -= vv[];
      
      if (uu[].linfty > 1.e-8)
      cout << "["+Stringification(pr)+"] Probleme partition de l'unite : uu[].linfty = " << uu[].linfty << endl;
    }    
    
    if (bpara){
      /* To count the total number of dofs (inspired from statistics hpddm) */
      int ndofglobi=0;
      int[int] table(pr#Vhi.ndof);
      /* table to label dofs */
      table = ii;
      for(int j=0;j<prmsh#numberIntersection;++j){ /* loop on the neighbors */
        pr#K[int] C(1);
        int[int] I(1), J(1);
        [I, J, C] = pr#restrictionIntersection[j]; /* now J is the restrictionIntersection[j] of hpddm */
        if (C[C.n-1] == 0) {
          I.resize(C.n-1);
          J.resize(C.n-1);
          C.resize(C.n-1);
        }
        
        for (int k=0;k<J.n;k++) /* loop on the neighbor dofs */
        table[J[k]] = max(table[J[k]], prmsh#arrayIntersection[j]);
      } 	
      for[i,tablei: table]{ /* syntax for c++ loops */
        if(tablei<=ii) ndofglobi++;
      }
      pr#Ndofglobal = 0;
      mpiReduce(ndofglobi, pr#Ndofglobal, processor(0,prmsh#commddm), mpiSUM);
      
      if (ffddmverbosity && mpiRank(prmsh#commddm) == 0)
      cout << "["+Stringification(pr)+"] (paraddm) ndof = " << pr#Ndofglobal << endl;     	
    }	
    
  }
}
// EOM

macro ffddmbuildDfespaceEdge(pr,prmesh,scalar,def,init,Pk,defpart,initpart,Pkpart)
IFMACRO(prmesh#buildAug,1)
ffddmbuildDfespacef(pr#Aug,prmesh#Aug,scalar,def,init,Pk,defpart,initpart,Pkpart)
ENDIFMACRO
ffddmbuildDfespacef(pr,prmesh,scalar,def,init,Pk,defpart,initpart,Pkpart)
IFMACRO(prmesh#buildAug,1)
if (bseq)
  pr#Auginterp = interpolate(pr#AugVhi,pr#Vhglob);
else if (bpara)
  pr#Auginterp = interpolate(pr#Vhi,pr#AugVhi);
ENDIFMACRO
// EOM

macro ffddmbuildDfespace(pr,prmesh,scalar,def,init,Pk)
ffddmbuildDfespaceEdge(pr,prmesh,scalar,def,init,Pk,def,init,Pk)
// EOM

macro ffddmbuildDfespaceAug(pr,prmesh,scalar,def,init,Pk)
ffddmbuildDfespaceEdge(pr,prmesh,scalar,def,init,Pk,def,init,Pk)
// EOM

macro ffddmbuildDfespaceEdgeAug(pr,prmesh,scalar,def,init,Pk,defpart,initpart,Pkpart)
ffddmbuildDfespaceEdge(pr,prmesh,scalar,def,init,Pk,defpart,initpart,Pkpart)
// EOM

macro ffddmbuildDmesh(pr,Th,comm)
if ((mpirank == 0) && ffddmverbosity)
cout << "["+Stringification(pr)+"] Building decomposition from mesh of " << Th.nt << " elements" << endl;
int pr#inexactCSsplit = 0;
int pr#binexactCS = 0;
int pr#binexactgeneoCS = 0;
int pr#pCS = ffddmpCS;
int pr#exclude = ffddmexclude;
ffddminitDmeshf(pr,Th,comm)

if (!bnoGlob)
if  (pr#inexactCSsplit <= 1) {
  if (ffddmsplit == 1)
    pr#Thglob = Th;
  else
    pr#Thglob = trunc(Th,1,split=ffddmsplit);
}
else 
  pr#Thglob = trunc(Th,1,split=pr#inexactCSsplit*ffddmsplit);

IFMACRO(!pr#mminoverlap)
NewMacro pr#mminoverlap()0 EndMacro
ENDIFMACRO

IFMACRO(!pr#buildAug)
IFMACRO(pr#mminoverlap,1)
NewMacro pr#buildAug()1 EndMacro
ENDIFMACRO
ENDIFMACRO

IFMACRO(!pr#buildAug)
NewMacro pr#buildAug()0 EndMacro
ENDIFMACRO

IFMACRO(pr#buildAug,1)
int pr#AuginexactCSsplit = 0;
int pr#AugbinexactCS = 0;
int pr#AugbinexactgeneoCS = 0;
int pr#AugpCS = ffddmpCS;
int pr#Augexclude = ffddmexclude;
ffddminitDmeshf(pr#Aug,Th,comm)
IFMACRO (!pr#AugbuildAug)
NewMacro pr#AugbuildAug()0 EndMacro
ENDIFMACRO
ENDIFMACRO

{
  real[int] locpartition;
  ffddmpartf(pr,Th,locpartition)
  
  IFMACRO(pr#buildAug,1)
  ffddmbuildDmeshf(pr#Aug,Th,locpartition,(ffddmoverlap+1))
  ENDIFMACRO

  ffddmbuildDmeshf(pr,Th,locpartition,ffddmoverlap)
}
// EOM

macro ffddmbuildDmeshtwolevel(pr,Thc,sp,comm)
if ((mpirank == 0) && !bpara)
cout << "["+Stringification(pr)+"] ffddmbuildtwolevelEdge PB: two-level decomposition is to be used only in parallel mode" << endl;
assert(bpara);
if ((mpirank == 0) && ffddmverbosity)
cout << "["+Stringification(pr)+ "] Building two-level decomposition from coarse mesh of " << Thc.nt << " elements, with splitting parameter " << sp << endl << "["+Stringification(pr)+"] Setting binexactCS = 1, pCS = mpisize, exclude = 0" << endl;

int pr#inexactCSsplit = sp;
int pr#binexactCS = 1;
int pr#binexactgeneoCS = 0;
NewMacro pr#minexactCS 1 EndMacro
int pr#pCS = ffddmpCS;
int pr#exclude = ffddmexclude;

int pr#CoarseinexactCSsplit = 1;
int pr#CoarsebinexactCS = 0;
int pr#CoarsebinexactgeneoCS = 0;
int pr#CoarsepCS = ffddmpCS;
int pr#Coarseexclude = ffddmexclude;

ffddminitDmeshf(pr,Thc,comm)

if (!bnoGlob)
if  (pr#inexactCSsplit <= 1) {
  if (ffddmsplit == 1)
    pr#Thglob = Thc;
  else
    pr#Thglob = trunc(Thc,1,split=ffddmsplit);
}
else 
  pr#Thglob = trunc(Thc,1,split=pr#inexactCSsplit*ffddmsplit);

ffddminitDmeshf(pr#Coarse,Thc,comm)

IFMACRO(!pr#buildAug)
NewMacro pr#buildAug()0 EndMacro
ENDIFMACRO
IFMACRO(!pr#CoarsebuildAug)
NewMacro pr#CoarsebuildAug()0 EndMacro
ENDIFMACRO

{
  real[int] partition;
  ffddmpartf(pr,Thc,partition)
  ffddmbuildDmeshf(pr#Coarse,Thc,partition,ffddmoverlap)
  ffddmbuildDmeshf(pr,Thc,partition,ffddmoverlap)
}
// EOM

macro ffddmbuildDmeshAug(pr,Th,comm)
IFMACRO(!pr#buildAug)
NewMacro pr#buildAug()1 EndMacro
ENDIFMACRO
ffddmbuildDmesh(pr,Th,comm)
// EOM

macro ffddmbuildDfespaceEdgeTwolevel(pr,prmesh,scalar,def,init,Pk,defpart,initpart,Pkpart)
ffddmbuildDfespaceEdge(pr#Coarse,prmesh#Coarse,scalar,def,init,Pk,defpart,initpart,Pkpart)
ffddmbuildDfespaceEdge(pr,prmesh,scalar,def,init,Pk,defpart,initpart,Pkpart)
// EOM

macro ffddmbuildDfespaceTwolevel(pr,prmesh,scalar,def,init,Pk)
ffddmbuildDfespaceEdgeTwolevel(pr,prmesh,scalar,def,init,Pk,def,init,Pk)
// EOM

macro ffddmbuild(pr,Th,scalar,def,init,Pk,comm)
ffddmbuildDmesh(pr,Th,comm)
ffddmbuildDfespace(pr,pr,scalar,def,init,Pk)
// EOM

macro ffddmbuildEdge(pr,Th,scalar,def,init,Pk,defpart,initpart,Pkpart,comm)
ffddmbuildDmesh(pr,Th,comm)
ffddmbuildDfespaceEdge(pr,pr,scalar,def,init,Pk,defpart,initpart,Pkpart)
// EOM

macro ffddmbuildEdgeTwolevel(pr,Thc,sp,scalar,def,init,Pk,defpart,initpart,Pkpart,comm)
ffddmbuildDmeshtwolevel(pr,Thc,sp,comm)
ffddmbuildDfespaceEdgeTwolevel(pr,pr,scalar,def,init,Pk,defpart,initpart,Pkpart)
// EOM

macro ffddmbuildTwolevel(pr,Thc,sp,scalar,def,init,Pk,comm)
ffddmbuildEdgeTwolevel(pr,Thc,sp,scalar,def,init,Pk,def,init,Pk,comm)
// EOM

macro ffddmbuildEdgeAug(pr,Th,scalar,def,init,Pk,defpart,initpart,PkP0,comm)
IFMACRO(!pr#buildAug)
NewMacro pr#buildAug()1 EndMacro
ENDIFMACRO
ffddmbuildEdge(pr,Th,scalar,def,init,Pk,defpart,initpart,PkP0,comm) // EOM

macro ffddmbuildAug(pr,Th,scalar,def,init,Pk,comm)
ffddmbuildEdgeAug(pr,Th,scalar,def,init,Pk,def,init,Pk,comm) // EOM

/*
macro ffddmbuildEdge(pr,Th,scalar,def,init,Pk,defpart,initpart,PkP0,comm)
if ((mpirank == 0) && ffddmverbosity)
cout << "Building decomposition from mesh of " << Th.nt << " elements" << endl;
int pr#inexactCSsplit = 0;
int pr#binexactCS = 0;
int pr#pCS = ffddmpCS;
int pr#exclude = ffddmexclude;
ffddminitf(pr,Th,scalar,def,init,Pk,defpart,initpart,PkP0,comm)

IFMACRO(pr#buildAug,1)
int pr#AuginexactCSsplit = 0;
int pr#AugbinexactCS = 0;
int pr#AugpCS = ffddmpCS;
int pr#Augexclude = ffddmexclude;
ffddminitf(pr#Aug,Th,scalar,def,init,Pk,defpart,initpart,PkP0,comm)
pr#Augverbosity = pr#verbosity;
ENDIFMACRO

{
real[int] partition;
ffddmpartf(pr,Th,partition)
ffddmbuildf(pr,Th,partition)

IFMACRO(pr#buildAug,1)
ffddmoverlap += 1;
ffddmbuildf(pr#Aug,Th,partition)
ffddmoverlap -= 1;
ENDIFMACRO
}

IFMACRO(pr#buildAug,1)
if (bseq)
pr#Auginterp = interpolate(pr#AugVhi,pr#Vhglob);
else if (bpara)
pr#Auginterp = interpolate(pr#Vhi,pr#AugVhi);
ENDIFMACRO
// EOM

macro ffddmbuild(pr,Th,scalar,def,init,Pk,comm)
ffddmbuildEdge(pr,Th,scalar,def,init,Pk,def,init,Pk,comm) // EOM

macro ffddmbuildaugEdge(pr,Th,scalar,def,init,Pk,defpart,initpart,PkP0,comm)
NewMacro pr#buildAug()1 EndMacro
ffddmbuildEdge(pr,Th,scalar,def,init,Pk,defpart,initpart,PkP0,comm) // EOM

macro ffddmbuildaug(pr,Th,scalar,def,init,Pk,comm)
ffddmbuildaugEdge(pr,Th,scalar,def,init,Pk,def,init,Pk,comm) // EOM

macro ffddmbuildtwolevelEdge(pr,Thc,sp,scalar,def,init,Pk,defpart,initpart,PkP0,comm)
if ((mpirank == 0) && !bpara)
cout << "ffddmbuildtwolevelEdge PB: two-level decomposition is to be used only in parallel mode" << endl;
assert(bpara);
if ((mpirank == 0) && ffddmverbosity)
cout << "Building two-level decomposition from coarse mesh of " << Thc.nt << " elements, with splitting parameter " << sp << endl << "Setting binexactCS = 1, pCS = mpisize, exclude = 0 for prefix \""+Stringification(pr)+"\"" << endl;

int pr#inexactCSsplit = sp;
int pr#binexactCS = 1;
NewMacro pr#minexactCS 1 EndMacro
int pr#pCS = ffddmpCS;
int pr#exclude = ffddmexclude;

int pr#CoarseinexactCSsplit = 1;
int pr#CoarsebinexactCS = 0;
int pr#CoarsepCS = ffddmpCS;
int pr#Coarseexclude = ffddmexclude;

ffddminitf(pr#Coarse,Thc,scalar,def,init,Pk,defpart,initpart,PkP0,comm)
ffddminitf(pr,Thc,scalar,def,init,Pk,defpart,initpart,PkP0,comm)

{
real[int] partition;
ffddmpartf(pr,Thc,partition)
ffddmbuildf(pr#Coarse,Thc,partition)
ffddmbuildf(pr,Thc,partition)
}

pr#Coarseverbosity = 1;

// EOM

macro ffddmbuildtwolevel(pr,Thc,sp,scalar,def,init,Pk,comm) ffddmbuildtwolevelEdge(pr,Thc,sp,scalar,def,init,Pk,def,init,Pk,comm) // EOM
*/
